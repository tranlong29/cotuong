using ChineseChess.Pieces;

namespace ChineseChess
{
    internal class Engine
    {
        #region Definition

        //------------------------------------------------------------[K] --[A]-- [E]-- [H]-- [R]-- [C]-- [S]
        public static readonly int[] BaseValue = {1000, 20, 20, 40, 90, 45, 10}; // base value of a piece
        private static readonly int[,] MaterialNumber = {{5, 2, 2, 2, 2, 2, 1}, {5, 2, 2, 2, 2, 2, 1}};

        public static int Ply = 0;
        public static int Hdp = 0;
        private static long NodeCount = 0;

        #region PointTable

        public static readonly int[,,] PointTable =
            {
                {
                    {
                        0, 0, 0, 30, 35, 30, 0, 0, 0, /* BLACK KING */
                        0, 0, 0, 15, 15, 15, 0, 0, 0,
                        0, 0, 0, 1, 1, 1, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0
                    },

                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, /* RED KING */
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 1, 1, 1, 0, 0, 0,
                        0, 0, 0, 15, 15, 15, 0, 0, 0,
                        0, 0, 0, 30, 35, 30, 0, 0, 0
                    }
                },
                {
                    {
                        0, 0, 0, 20, 0, 20, 0, 0, 0, /* BLACK ADVISOR */
                        0, 0, 0, 0, 22, 0, 0, 0, 0,
                        0, 0, 0, 19, 0, 19, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0
                    },

                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, /* RED ADVISOR */
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 19, 0, 19, 0, 0, 0,
                        0, 0, 0, 0, 22, 0, 0, 0, 0,
                        0, 0, 0, 20, 0, 20, 0, 0, 0
                    }
                },
                {
                    {
                        0, 0, 25, 0, 0, 0, 25, 0, 0, /* BLACK ELEPHANT */
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        23, 0, 0, 0, 28, 0, 0, 0, 23,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 22, 0, 0, 0, 22, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0
                    },

                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, /* RED ELEPHANT */
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 22, 0, 0, 0, 22, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        23, 0, 0, 0, 28, 0, 0, 0, 23,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 25, 0, 0, 0, 25, 0, 0
                    }
                },
                {
                    {
                        40, 35, 40, 40, 40, 40, 40, 35, 40, /* BLACK HORSE */
                        40, 41, 42, 40, 20, 40, 42, 41, 40,
                        40, 42, 43, 40, 40, 40, 43, 42, 40,
                        40, 42, 43, 43, 43, 43, 43, 42, 40,
                        40, 43, 44, 44, 44, 44, 44, 43, 40,
                        40, 43, 44, 44, 44, 44, 44, 43, 40,
                        40, 43, 44, 44, 44, 44, 44, 43, 40,
                        40, 43, 44, 44, 44, 44, 44, 43, 40,
                        40, 41, 42, 42, 42, 42, 42, 41, 40,
                        40, 40, 40, 40, 40, 40, 40, 40, 40
                    },
                    {
                        40, 40, 40, 40, 40, 40, 40, 40, 40, /* RED HORSE*/
                        40, 41, 42, 42, 42, 42, 42, 41, 40,
                        40, 43, 44, 44, 44, 44, 44, 43, 40,
                        40, 43, 44, 44, 44, 44, 44, 43, 40,
                        40, 43, 44, 44, 44, 44, 44, 43, 40,
                        40, 43, 44, 44, 44, 44, 44, 43, 40,
                        40, 42, 43, 43, 43, 43, 43, 42, 40,
                        40, 42, 43, 40, 40, 40, 43, 42, 40,
                        40, 41, 42, 40, 20, 40, 42, 41, 40,
                        40, 35, 40, 40, 40, 40, 40, 35, 40
                    }
                },
                {
                    {
                        89, 92, 90, 90, 90, 90, 90, 92, 89, /* BLACK CHARIOT */
                        91, 92, 90, 93, 90, 93, 90, 92, 91,
                        90, 92, 90, 91, 90, 91, 90, 92, 90,
                        90, 91, 90, 91, 90, 91, 90, 91, 90,
                        90, 94, 90, 94, 90, 94, 90, 94, 90,
                        90, 93, 90, 91, 90, 91, 90, 93, 90,
                        90, 91, 90, 91, 90, 91, 90, 91, 90,
                        90, 91, 90, 90, 90, 90, 90, 91, 90,
                        90, 92, 91, 91, 90, 91, 91, 92, 90,
                        90, 90, 90, 90, 90, 90, 90, 90, 90
                    },

                    {
                        90, 90, 90, 90, 90, 90, 90, 90, 90, /* RED CHARIOT */
                        90, 92, 91, 91, 90, 91, 91, 92, 90,
                        90, 91, 90, 90, 90, 90, 90, 91, 90,
                        90, 91, 90, 91, 90, 91, 90, 91, 90,
                        90, 93, 90, 91, 90, 91, 90, 93, 90,
                        90, 94, 90, 94, 90, 94, 90, 94, 90,
                        90, 91, 90, 91, 90, 91, 90, 91, 90,
                        90, 92, 90, 91, 90, 91, 90, 92, 90,
                        91, 92, 90, 93, 90, 93, 90, 92, 91,
                        89, 92, 90, 90, 90, 90, 90, 92, 89
                    }
                },
                {
                    {
                        50, 50, 50, 50, 50, 50, 50, 50, 50, /* BLACK CANNON */
                        50, 50, 50, 50, 50, 50, 50, 50, 50,
                        50, 51, 53, 53, 55, 53, 53, 51, 50,
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 51, 51, 51, 51, 51, 51, 51, 50,
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 50, 50, 50, 50, 50, 50, 50, 50
                    },
                    {
                        50, 50, 50, 50, 50, 50, 50, 50, 50, /* RED  CANNON */
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 51, 51, 51, 51, 51, 51, 51, 50,
                        50, 51, 50, 50, 50, 50, 50, 51, 50,
                        50, 51, 53, 53, 55, 53, 53, 51, 50,
                        50, 50, 50, 50, 50, 50, 50, 50, 50,
                        50, 50, 50, 50, 50, 50, 50, 50, 50
                    }
                },
                {
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, /* BLACK  SOLDIER*/
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        10, 0, 12, 0, 15, 0, 12, 0, 10,
                        10, 0, 13, 0, 10, 0, 13, 0, 10,
                        20, 20, 20, 20, 20, 20, 20, 20, 20,
                        20, 21, 21, 22, 22, 22, 21, 21, 20,
                        20, 21, 21, 23, 23, 23, 21, 21, 20,
                        20, 21, 21, 23, 22, 23, 21, 21, 20,
                        11, 12, 13, 14, 14, 14, 13, 12, 11
                    },
                    {
                        11, 12, 13, 14, 14, 14, 13, 12, 11, /* RED SOLDIER*/
                        20, 21, 21, 23, 22, 23, 21, 21, 20,
                        20, 21, 21, 23, 23, 23, 21, 21, 20,
                        20, 21, 21, 22, 22, 22, 21, 21, 20,
                        20, 20, 20, 20, 20, 20, 20, 20, 20,
                        10, 0, 13, 0, 10, 0, 13, 0, 10,
                        10, 0, 12, 0, 15, 0, 12, 0, 10,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                }
            };

        #endregion

        #endregion

        //private static int Bonus()
        //{
        //    int bonus = 0;
        //    int[,] b =
        //        {
        //            {-2, -3, -3, -4, -4, -5, 0},
        //            {-2, -3, -3, -4, -4, -5, 0}
        //        };

        //    for (int i = 0; i < 2; i++)
        //    {
        //        //if(MaterialNumber[i][])
        //    }
        //    return bonus;
        //}

        public static int EvalValue()
        {
            int value = 0;
            for (int i = 0; i < 10; i++)
            {
                for (int j = 0; j < 9; j++)
                {
                    if (Board.Position[i, j].Side == Player.COM)
                    {
                        value += Board.Position[i, j].Value;
                    }
                    else // MAN
                    {
                        value -= Board.Position[i, j].Value;
                    }
                }
            }
            if (Player.Side == Player.MAN)
            {
                value = -value;
            }
            return value;// +Bonus();
        }

        /************************************************************************/
        /*                 MOVE                              */
        /***********************************************************************/

        public static bool MakeMove(Move m)
        {
            int rowFrom, colFrom, rowDest, colDest;
            Piece p;
            NodeCount++;
            rowFrom = m.RowFrom;
            colFrom = m.ColFrom;
            rowDest = m.RowDest;
            colDest = m.ColDest;
            p = m.PieceDest;

            //if (Board.Position[m.RowDest, m.RowFrom].IsEmpty)
            //{
                //MaterialNumber[Player.Side,]
            //}
            Hdp++;
            Ply++;
            Game.ChangeTurn();
            return true;
        }

        public static void UnMakeMove()
        {
            int rowFrom, colFrom, rowDest, colDest;
            Hdp--;
            Ply--;
            Game.ChangeTurn();
            
        }
    }
}